# -*- coding: utf-8 -*-
"""LLM_Rag.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TeWn1Mae_A9ptuZpwGwT2LvZlhP8Ib9f
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install -r requirment.txt

import os

from langchain.document_loaders import UnstructuredFileLoader
from langchain_text_splitters import CharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_chroma import Chroma
from langchain_groq import ChatGroq
from langchain.chains import RetrievalQA

os.environ["GROQ_API_KEY"] = "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"

import requests
url = "https://dspmuranchi.ac.in/pdf/Blog/Python%20Built-In%20Functions.pdf"
response = requests.get(url)

# Save the PDF to a local file
with open("python_inbuildfunction.pdf", "wb") as f:
    f.write(response.content)

# laoding the document
loader = UnstructuredFileLoader("python_inbuildfunction.pdf")

documents = loader.load()
documents

text_splitter = CharacterTextSplitter(
    chunk_size=2000,
    chunk_overlap=400
)

texts = text_splitter.split_documents(documents)

type(texts)

len(texts)

texts[4]

embeddings = HuggingFaceEmbeddings()

persist_directory = "vector_db"

vectordb = Chroma.from_documents(
    documents=texts,
    embedding=embeddings,
    persist_directory=persist_directory
)

retriever = vectordb.as_retriever()

# llm from groq
llm = ChatGroq(
    model="llama-3.1-70b-versatile",temperature=0)

qa_chain = RetrievalQA.from_chain_type(
    llm=llm,
    chain_type="stuff",
    retriever=retriever,
    return_source_documents=True
)

# invoke the qa chain and get a response for user query
query = "what are the function from this pdf "
response = qa_chain.invoke({"query": query})

print(response)

print(response["result"])

print(response["source_documents"][0].metadata["source"])

# invoke the qa chain and get a response for user query
query = "Give me summary of all function from this pdf?"
response = qa_chain.invoke({"query": query})
print(response["result"])
print("*"*30)
print("Source Document:", response["source_documents"][0].metadata["source"])

